#!/bin/bash
# Public URL: http://ibm.biz/wfss-swinger-sshv
# Usage: bash <(curl -sSL http://ibm.biz/wfss-swinger-sshv)

VAULT_ADDR="http://vault:8200"
VAULT_TOKEN="s.ePQpZYy5DgApxWSpkoj9JLaD"
ARGS="$*"

# Prereqs
if jq -V >/dev/null; then true; else echo "Please install jq first"; exit 1; fi

# Make "sshv" run the script
comment="# Added by configuration-manager@foo.com"
command="alias sshv='bash <(curl -sSL http://ibm.biz/wfss-swinger-sshv)'"
path=~/.bashrc
grep -q -F "${command}" "${path}" || { printf "\n%s\n%s" "${comment}" "${command}" >> "${path}"; echo "ssh installed. To use it, open a new bash login shell or, to use it immediately, type this now: source ~/.bashrc"; }

# Troubleshooting: Check your current login token
# curl -sS --header "X-Vault-Token: $VAULT_TOKEN" --request GET $VAULT_ADDR/v1/auth/token/lookup

# Create a temporary, i.e., worthless after its certificate expires, ssh keypair for this user
# Note that "echo yes | ... " overwrites any existing output file
echo yes | ssh-keygen -N '' -t rsa -b 4096 -a 100 -f ~/.ssh/id_rsa_vault >/dev/null

# Set parameters
tee foo.json >/dev/null <<EOF
{
  "public_key"       :  "$(tr '\n' '*' < ~/.ssh/id_rsa_vault.pub | sed 's/\*/\\n/g')",
  "ttl"              :  "7s",
  "valid_principals" :  "user1",
  "cert_type"        :  "user",
  "key_id"           :  "user1@client1 created by sshv",
  "critical_options" :  { "force-command": "echo This is a single-purpose key. To change that, remove force-command in sshv" },
  "extension"        :  { "permit-pty":"", "permit-port-forwarding": "" },
  "cert_type"        :  "user"
}
EOF

# Sign
curl -sS --header "X-Vault-Token: $VAULT_TOKEN" --request POST \
     --data @foo.json $VAULT_ADDR/v1/users-ca/sign/role1 |\
     jq -r ".data.signed_key" > ~/.ssh/id_rsa_vault-cert.pub

# Automatically try using that cert on new connections
comment="# Added by configuration-manager@foo.com"
keyword_pair='IdentityFile ~/.ssh/id_rsa_vault'
path=~/.ssh/config
grep -q -F "${keyword_pair}" "${path}" || printf "\n%s\n%s" "${comment}" "${keyword_pair}" >> "${path}"

# Instructions
if [[ "$#" -eq 0 ]]; then
  printf "\nSuccess. Try something like: ssh user1@sshserver OR sshv user1@sshserver\n\n"
else
  ssh -o IdentitiesOnly=yes "${ARGS}"
fi
